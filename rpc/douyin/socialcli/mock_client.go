// Code generated by MockGen. DO NOT EDIT.
// Source: kitex_gen/douyin/socialcli/socialservice/client.go

// Package socialcli is a generated GoMock package.
package socialcli

import (
	social "ByteTech-7355608/douyin-server/kitex_gen/douyin/social"
	context "context"
	reflect "reflect"

	callopt "github.com/cloudwego/kitex/client/callopt"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// FollowAction mocks base method.
func (m *MockClient) FollowAction(ctx context.Context, req *social.DouyinFollowActionRequest, callOptions ...callopt.Option) (*social.DouyinFollowActionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FollowAction", varargs...)
	ret0, _ := ret[0].(*social.DouyinFollowActionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowAction indicates an expected call of FollowAction.
func (mr *MockClientMockRecorder) FollowAction(ctx, req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowAction", reflect.TypeOf((*MockClient)(nil).FollowAction), varargs...)
}

// FollowList mocks base method.
func (m *MockClient) FollowList(ctx context.Context, req *social.DouyinFollowingListRequest, callOptions ...callopt.Option) (*social.DouyinFollowingListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FollowList", varargs...)
	ret0, _ := ret[0].(*social.DouyinFollowingListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowList indicates an expected call of FollowList.
func (mr *MockClientMockRecorder) FollowList(ctx, req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowList", reflect.TypeOf((*MockClient)(nil).FollowList), varargs...)
}

// FollowerList mocks base method.
func (m *MockClient) FollowerList(ctx context.Context, req *social.DouyinFollowerListRequest, callOptions ...callopt.Option) (*social.DouyinFollowerListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FollowerList", varargs...)
	ret0, _ := ret[0].(*social.DouyinFollowerListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowerList indicates an expected call of FollowerList.
func (mr *MockClientMockRecorder) FollowerList(ctx, req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowerList", reflect.TypeOf((*MockClient)(nil).FollowerList), varargs...)
}

// FriendList mocks base method.
func (m *MockClient) FriendList(ctx context.Context, req *social.DouyinRelationFriendListRequest, callOptions ...callopt.Option) (*social.DouyinRelationFriendListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FriendList", varargs...)
	ret0, _ := ret[0].(*social.DouyinRelationFriendListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FriendList indicates an expected call of FriendList.
func (mr *MockClientMockRecorder) FriendList(ctx, req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FriendList", reflect.TypeOf((*MockClient)(nil).FriendList), varargs...)
}

// MessageList mocks base method.
func (m *MockClient) MessageList(ctx context.Context, req *social.DouyinMessageChatRequest, callOptions ...callopt.Option) (*social.DouyinMessageChatResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MessageList", varargs...)
	ret0, _ := ret[0].(*social.DouyinMessageChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageList indicates an expected call of MessageList.
func (mr *MockClientMockRecorder) MessageList(ctx, req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageList", reflect.TypeOf((*MockClient)(nil).MessageList), varargs...)
}

// SendMessage mocks base method.
func (m *MockClient) SendMessage(ctx context.Context, req *social.DouyinMessageActionRequest, callOptions ...callopt.Option) (*social.DouyinMessageActionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessage", varargs...)
	ret0, _ := ret[0].(*social.DouyinMessageActionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockClientMockRecorder) SendMessage(ctx, req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockClient)(nil).SendMessage), varargs...)
}
