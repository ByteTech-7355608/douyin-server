// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "funcdata.h"
#include "textflag.h"

TEXT Â·__native_entry__(SB), NOSPLIT, $0
	NO_LOCAL_POINTERS
	LONG $0xf9058d48; WORD $0xffff; BYTE $0xff // leaq         $-7(%rip), %rax
	MOVQ AX, 8(SP)
	RET

_do_skip:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	MOVL $0, 4(DI)
	MOVB CX, 0(DI)
	XORL R15, R15
	LONG $0x59058d4c; WORD $0x0003; BYTE $0x00 // leaq         $857(%rip), %r8  /* LJTI0_0(%rip) */
	LONG $0x960d8d4c; WORD $0x0003; BYTE $0x00 // leaq         $918(%rip), %r9  /* _SkipSizeFixed(%rip) */
	LONG $0x8f158d4c; WORD $0x0004; BYTE $0x00 // leaq         $1167(%rip), %r10  /* _WireTags(%rip) */
	XORL R11, R11

LBB0_1:
	MOVQ    $-1, AX
	LEAL    1(CX), BX
	CMPB    BX, $16
	JA      LBB0_57
	MOVBLZX BX, BX
	MOVLQSX 0(R8)(BX*4), BX
	ADDQ    R8, BX
	JMP     BX

LBB0_3:
	MOVBLZX CX, AX
	MOVBQSX 0(AX)(R9*1), CX
	SUBQ    CX, DX
	JL      LBB0_55

LBB0_4:
	MOVL  4(DI)(R15*8), AX
	TESTL AX, AX
	JE    LBB0_6
	ADDL  $-1, AX
	MOVL  AX, 4(DI)(R15*8)
	JMP   LBB0_7

LBB0_6:
	ADDQ $-1, R15

LBB0_7:
	ADDQ CX, R11

LBB0_8:
	TESTQ   R15, R15
	JS      LBB0_56
	ADDQ    CX, SI
	MOVBLZX 0(DI)(R15*8), CX
	JMP     LBB0_1

LBB0_10:
	CMPQ    DX, $5
	JL      LBB0_55
	MOVBLZX 0(SI), BX
	MOVBLZX BX, CX
	CMPB    0(CX)(R10*1), $0
	JE      LBB0_57
	MOVL    1(SI), AX
	TESTL   AX, AX
	JE      LBB0_36
	BSWAPL  AX
	MOVBQSX 0(CX)(R9*1), CX
	TESTQ   CX, CX
	JE      LBB0_38
	IMULQ   AX, CX
	ADDQ    $5, CX
	MOVQ    $-2, AX
	SUBQ    CX, DX
	JGE     LBB0_4
	JMP     LBB0_57

LBB0_16:
	MOVBLZX 2(DI)(R15*8), AX
	MOVL    4(DI)(R15*8), CX
	TESTL   CX, CX
	JE      LBB0_39
	ADDL    $-1, CX
	MOVL    CX, 4(DI)(R15*8)
	TESTB   $1, CX
	MOVBLZX 1(DI)(R15*8), CX
	MOVBLZX AX, AX
	WORD    $0x440f; BYTE $0xc1 // cmovel       %ecx, %eax
	CMPQ    R15, $65534
	JLE     LBB0_40
	JMP     LBB0_18

LBB0_19:
	MOVQ   $-2, AX
	CMPQ   DX, $4
	JL     LBB0_57
	MOVL   0(SI), CX
	BSWAPL CX
	ADDQ   $4, CX
	SUBQ   CX, DX
	JGE    LBB0_4
	JMP    LBB0_57

LBB0_22:
	TESTQ   DX, DX
	JLE     LBB0_55
	MOVBLZX 0(SI), CX
	TESTQ   CX, CX
	JE      LBB0_41
	CMPB    0(CX)(R10*1), $0
	JE      LBB0_57
	MOVBQSX 0(CX)(R9*1), BX
	TESTQ   BX, BX
	JE      LBB0_48
	ADDQ    $3, BX
	MOVQ    $-2, AX
	SUBQ    BX, DX
	JL      LBB0_57
	ADDQ    BX, R11
	ADDQ    BX, SI
	MOVBLZX 0(DI)(R15*8), CX
	JMP     LBB0_1

LBB0_28:
	CMPQ    DX, $6
	JL      LBB0_55
	MOVBLZX 0(SI), R14
	MOVBLZX R14, BX
	CMPB    0(BX)(R10*1), $0
	JE      LBB0_57
	MOVBLZX 1(SI), R12
	MOVBLZX R12, CX
	CMPB    0(CX)(R10*1), $0
	JE      LBB0_57
	MOVL    2(SI), AX
	TESTL   AX, AX
	JE      LBB0_43
	BSWAPL  AX
	MOVBQSX 0(BX)(R9*1), BX
	TESTQ   BX, BX
	JE      LBB0_45
	MOVBLZX 0(CX)(R9*1), CX
	TESTB   CX, CX
	JE      LBB0_45
	MOVBQSX CX, CX
	ADDQ    BX, CX
	IMULQ   AX, CX
	ADDQ    $6, CX
	MOVQ    $-2, AX
	SUBQ    CX, DX
	JGE     LBB0_4
	JMP     LBB0_57

LBB0_36:
	MOVL  4(DI)(R15*8), AX
	TESTL AX, AX
	JE    LBB0_46
	ADDL  $-1, AX
	MOVL  AX, 4(DI)(R15*8)
	JMP   LBB0_47

LBB0_38:
	MOVB    BX, 0(DI)(R15*8)
	ADDL    $-1, AX
	MOVL    AX, 4(DI)(R15*8)
	ADDQ    $-5, DX
	ADDQ    $5, R11
	ADDQ    $5, SI
	MOVBLZX 0(DI)(R15*8), CX
	JMP     LBB0_1

LBB0_39:
	ADDQ $-1, R15
	CMPQ R15, $65534
	JG   LBB0_18

LBB0_40:
	MOVB    AX, 8(DI)(R15*8)
	MOVL    $0, 12(DI)(R15*8)
	ADDQ    $1, R15
	MOVBLZX 0(DI)(R15*8), CX
	JMP     LBB0_1

LBB0_41:
	MOVL  4(DI)(R15*8), AX
	TESTL AX, AX
	JE    LBB0_51
	ADDL  $-1, AX
	MOVL  AX, 4(DI)(R15*8)
	JMP   LBB0_52

LBB0_43:
	MOVL  4(DI)(R15*8), AX
	TESTL AX, AX
	JE    LBB0_53
	ADDL  $-1, AX
	MOVL  AX, 4(DI)(R15*8)
	JMP   LBB0_54

LBB0_45:
	MOVB    R14, 1(DI)(R15*8)
	MOVB    R12, 2(DI)(R15*8)
	MOVB    $-1, 0(DI)(R15*8)
	ADDL    AX, AX
	ADDL    $-1, AX
	MOVL    AX, 4(DI)(R15*8)
	ADDQ    $-6, DX
	ADDQ    $6, R11
	ADDQ    $6, SI
	MOVBLZX 0(DI)(R15*8), CX
	JMP     LBB0_1

LBB0_46:
	ADDQ $-1, R15

LBB0_47:
	ADDQ $-5, DX
	ADDQ $5, R11
	MOVL $5, CX
	JMP  LBB0_8

LBB0_48:
	MOVQ    $-2, AX
	CMPQ    DX, $4
	JL      LBB0_57
	CMPQ    R15, $65534
	JG      LBB0_18
	MOVB    CX, 8(DI)(R15*8)
	MOVL    $0, 12(DI)(R15*8)
	ADDQ    $1, R15
	ADDQ    $-3, DX
	ADDQ    $3, R11
	ADDQ    $3, SI
	MOVBLZX 0(DI)(R15*8), CX
	JMP     LBB0_1

LBB0_51:
	ADDQ $-1, R15

LBB0_52:
	ADDQ $-1, DX
	ADDQ $1, R11
	MOVL $1, CX
	JMP  LBB0_8

LBB0_53:
	ADDQ $-1, R15

LBB0_54:
	ADDQ $-6, DX
	ADDQ $6, R11
	MOVL $6, CX
	JMP  LBB0_8

LBB0_55:
	MOVQ $-2, AX
	JMP  LBB0_57

LBB0_56:
	MOVQ R11, AX

LBB0_57:
	BYTE $0x5b   // popq         %rbx
	WORD $0x5c41 // popq         %r12
	WORD $0x5e41 // popq         %r14
	WORD $0x5f41 // popq         %r15
	BYTE $0x5d   // popq         %rbp
	RET

LBB0_18:
	MOVQ $-3, AX
	JMP  LBB0_57

// .set L0_0_set_16, LBB0_16-LJTI0_0
// .set L0_0_set_57, LBB0_57-LJTI0_0
// .set L0_0_set_3, LBB0_3-LJTI0_0
// .set L0_0_set_19, LBB0_19-LJTI0_0
// .set L0_0_set_22, LBB0_22-LJTI0_0
// .set L0_0_set_28, LBB0_28-LJTI0_0
// .set L0_0_set_10, LBB0_10-LJTI0_0
LJTI0_0:
	LONG $0xfffffd64 // .long L0_0_set_16
	LONG $0xffffffee // .long L0_0_set_57
	LONG $0xffffffee // .long L0_0_set_57
	LONG $0xfffffcd7 // .long L0_0_set_3
	LONG $0xfffffcd7 // .long L0_0_set_3
	LONG $0xfffffcd7 // .long L0_0_set_3
	LONG $0xffffffee // .long L0_0_set_57
	LONG $0xfffffcd7 // .long L0_0_set_3
	LONG $0xffffffee // .long L0_0_set_57
	LONG $0xfffffcd7 // .long L0_0_set_3
	LONG $0xffffffee // .long L0_0_set_57
	LONG $0xfffffcd7 // .long L0_0_set_3
	LONG $0xfffffda0 // .long L0_0_set_19
	LONG $0xfffffdc7 // .long L0_0_set_22
	LONG $0xfffffe19 // .long L0_0_set_28
	LONG $0xfffffd15 // .long L0_0_set_10
	LONG $0xfffffd15 // .long L0_0_set_10

_SkipSizeFixed:
	QUAD $0x0002000801010000; WORD $0x0004; BYTE $0x08 // .ascii 11, '\x00\x00\x01\x01\x08\x00\x02\x00\x04\x00\x08'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000; BYTE $0x00                       // .space 5, '\x00\x00\x00\x00\x00'

_WireTags:
	QUAD $0x0001000101010000; QUAD $0x0101010101010001 // .ascii 16, '\x00\x00\x01\x01\x01\x00\x01\x00\x01\x00\x01\x01\x01\x01\x01\x01'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

TEXT Â·__do_skip(SB), NOSPLIT | NOFRAME, $0 - 0
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -40(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_do_skip:
	LEAQ Â·__native_entry__+13(SB), AX // _do_skip
	JMP  AX

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry
